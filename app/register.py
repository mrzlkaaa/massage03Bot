from app import clients
from . import *
from .base import Base

__all__ = ["Register"]

class Register(Base):
    (
        MEDICAL_COMPLAINTS,
        PICK_MASSAGE,
        # PICK_PROMOTION,
        PROMOTIONS_INQUIRY,
        TO_REGISTER_INQUIRY,
        *_
    ) = list(map(lambda x: str(x), range(150, 200)))


    async def promotions(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:

        to_btns = [
            ("–ù–∞–∑–∞–¥", self.BACK),
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", self.FINISH)
        ]

        btns = self._build_btns(1, to_btns)

        self.register_store[update.callback_query.from_user.id] = dict()
         
        #* name + id
        appeal_to = update.callback_query.from_user.first_name
        self.register_store[update.callback_query.from_user.id]["name"] = appeal_to
        self.register_store[update.callback_query.from_user.id]["id"] = update.callback_query.from_user.id
        
        emoji = self.text_data.get("numerical_emoji")
        services = self.text_data.get("promotions").get("services")
        desc = self.text_data.get("promotions").get("promotions_desc")

        promotions = ""
        for i in range(len(services)):
            promotions += f"{emoji[i]}   {services[i]}" + '\n'.join(desc[i])
        
        await update.callback_query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –∞–∫—Ü–∏—è–º–∏:\n\n"
            + promotions,
            reply_markup=btns
        )
        return self.TO_REGISTER_INQUIRY

    async def register_inquiry(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        print("register")
        to_btns = [
            ("–í—ã–±—Ä–∞—Ç—å –≤–∏–¥ –º–∞—Å—Å–∞–∂–∞", self.PICK_MASSAGE),
            ("–£ –º–µ–Ω—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è", self.MEDICAL_COMPLAINTS),
            # ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", ON_TEST_TIME),
            ("–ù–∞–∑–∞–¥", self.BACK),
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", self.FINISH)
        ]
        
        btns = self._build_btns(2, to_btns)
        
        self.register_store[update.callback_query.from_user.id] = dict()

        #* name + id 
        appeal_to = update.callback_query.from_user.first_name
        self.register_store[update.callback_query.from_user.id]["id"] = update.callback_query.from_user.id
        self.register_store[update.callback_query.from_user.id]["name"] = appeal_to

        
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤–∏–¥ –º–∞—Å—Å–∞–∂–∞?\n",
            reply_markup=btns
            
        )
    
        return self.TO_REGISTER_INQUIRY

    async def register_medical_complaints(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        # self.register_store[update.message.from_user.id]["complaints"] = update.message.text

        await update.callback_query.edit_message_text(
            "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∂–∞–ª–æ–±—ã –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üìù",
        )
        return self.TO_REGISTER_INQUIRY
    
    async def register_massage(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        print("called")
        massages = self.text_data.get("massages").get("services")
        emoji = self.text_data.get("numerical_emoji")
        massage_services = ""
        for i in range(len(massages)):
            massage_services += f"{emoji[i]}   {massages[i]}\n\n"
        
        print(massage_services)
        await update.callback_query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –í–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏ –º–∞—Å—Å–∞–∂–∞ üìã\n\n"
            + massage_services 
            +"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n"
            +"–ï—Å–ª–∏ –í—ã –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0Ô∏è‚É£\n"
            +"–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–∞—Å—Ç–µ—Ä –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –í–∞—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã"
            
        )
        return self.TO_REGISTER_INQUIRY
    
    async def register_inquiry_time(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        
        message = update.message.text
        order = self._validate_order(message)
        
        if not order:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —É—Å–ª—É–≥–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                + "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
            
            return self.TO_REGISTER_INQUIRY
        
        
        self.register_store[update.message.from_user.id]["order"] = order

        
        await update.message.reply_text(
            "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞ –¥–ª—è –í–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ?",
            reply_markup=ReplyKeyboardMarkup(
                self.TIME_GRID,
                one_time_keyboard = True,
            )
        )
        return self.TO_REGISTER_INQUIRY

    async def register_inquiry_phone(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        
        
        self.register_store[update.message.from_user.id]["time"] = update.message.text

        res = self.clients.get_by_tgid(update.message.from_user.id)
    
        if not res.phone_number:
            phone_btn = KeyboardButton(
                "–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä",
                request_contact=True
                
            )
            await update.message.reply_text(
                "‚òé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –í–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=ReplyKeyboardMarkup(
                    [[phone_btn]], 
                    one_time_keyboard = True
                )
            )
            return self.TO_REGISTER_INQUIRY
        
        self.register_store[update.message.from_user.id]["phone_number"] = "\\" + res.phone_number
        self.register_store[update.message.from_user.id]["approved"] = False 
        
        await self.register_to_master(
            update,
            context,    
            **self.register_store[update.message.from_user.id]
        )

        # self.register_store[update.message.from_user.id].clear()
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ üôè\n"
            + "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ\n"
            + "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏\n"
            + "–î–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )

        return self.END

        

    async def register_inquiry_finish(
        self,
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        try:
            phone_number = self._number_correction(update.message.contact.phone_number)
        except AttributeError:
            phone_number = self._number_correction(update.message.text)
            
        print(phone_number)
        res = self.clients.update(
            update.message.from_user.id, 
            {
                "phone_number": phone_number[1:]
            }
        )

        if not res:
            self.logger.error(
                f"Update operation of client <{update.message.from_user.id}> has failed."
                + f"Phone number {phone_number} was not added to DB"
            )
        else:
            self.logger.info(
                f"Update operation of client <{update.message.from_user.id}> success."
                + f"Phone number {phone_number} has been added to DB"
            )
        self.register_store[update.message.from_user.id]["phone_number"] = phone_number
        self.register_store[update.message.from_user.id]["approved"] = False 

        print(self.register_store)
        await self.register_to_master(
            update,
            context,    
            **self.register_store[update.message.from_user.id]
        )

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ üôè\n"
            + "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ\n"
            + "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏\n"
            + "–î–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return self.END

    def _number_correction(
        self,
        string
    ):
        if string.startswith("7"):
            string = "\+" + string
        elif string.startswith("+"):
            string = "\+" + string[1:]
        elif string.startswith("8"):
            string = "\+7" + string[1:]
        elif string.startswith("9"):
            string = "\+7" + string
        
        return string

    def _validate_order(
        self,
        message
    ):
        #* drop spaces
        message = message.strip()
        #* separation of text / int data
        try:
            int(message)
            massage = self.text_data.get("massages")\
                .get("mapping")\
                .get(message)
            promo = self.text_data.get("promotions")\
                .get("mapping")\
                .get(message)
            
            if massage:
                return massage
            elif promo:
                return promo
            else:
                return False

        except AttributeError:

            return message